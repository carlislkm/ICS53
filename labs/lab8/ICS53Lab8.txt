ICS 53 Lab 8
Remember you are not allowed to write any code until you start your scheduled lab time-slot.
You may use any of the functions defined in string.h or ctype.h.
You may use my stack or queue in ~klefstad/public/{stk,que} if you like.
1. Write a program, called search, that computes grep -nFHr for a set of files/directories (passed in as arguments) using the following parallel algorithm. Note, matches will be jumbled/intermixed because files are being searched in parallel, but each matching line should not be jumbled with other matching lines. Handle only fixed-strings for pattern - not regular expressions.
        void print_match(char * file_name, int file_index, int line_number, char * line)
        {
                // Ensure text for match comes out on one line (so lines are atomic)
                // Matches from several files may be intermixed with each other (if parallel).
// Use the following to start, but it will be wrong if your parallelism is working.
                printf(“%d %s %d %s\n”, file_index, file_name, line_number, line);
        }
        void add_all_matching_lines(char * pattern, int file_index, char * file_name)
        {
                int line_number = 1;
                for each line, s, in contents_of(file_name)
                {
                        if ( pattern_is_contained_within_line(pattern, s) ) //  can use strstr()
                                print_match(file_name, file_index, line_number, s);
line_number++;
}
        }
        void search(char * pattern, int file_index, char * file_name)
        {
                if ( !is_readable(file_name) )
                        return;
                if ( is_file(file_name) )
                        fork_thread add_all_matching_lines(pattern, file_index, file_name);
                else if ( is_directory(file_name) )
                           {
                                       // yes, this could be in another thread, but don’t do it!
                        for each file name, f, in contents_of(file_name)
                                search(pattern, file_index, file_name/f);
                            }
        }
        int main( int argc, char *argv[] ) // a parallel version of grep -r
        {
                int file_index = 1;
                if ( argc != 3 )
                        error(“Usage: search pattern file”);
                for each file name, f, in argv[2] to argv[argc-1]
search(argv[1], file_index++, f);
                return 0;
        }
SAMPLE INPUT (note this example only creates between 3 and 6 threads)
$ search encyclopedia /usr/share/dict /usr/share/dict /usr/share/dict
SAMPLE OUTPUT (assuming the word encyclopedia is on line 345 of /usr/share/dict/linux.words)
1 /usr/share/dict/linux.words 126576 encyclopedia
3 /usr/share/dict/linux.words 126577 encyclopediac
2 /usr/share/dict/linux.words 126578 encyclopediacal
1 /usr/share/dict/linux.words 126579 encyclopedial
2 /usr/share/dict/linux.words 126580 encyclopedian
3 /usr/share/dict/linux.words 126581 encyclopedias
1 /usr/share/dict/linux.words 126582 encyclopediast
2 /usr/share/dict/linux.words 126576 encyclopedia
2 /usr/share/dict/linux.words 126577 encyclopediac
3 /usr/share/dict/linux.words 126578 encyclopediacal
3 /usr/share/dict/linux.words 126579 encyclopedial
1 /usr/share/dict/linux.words 126580 encyclopedian
2 /usr/share/dict/linux.words 126581 encyclopedias
2 /usr/share/dict/linux.words 126582 encyclopediast
3 /usr/share/dict/linux.words 126576 encyclopedia
1 /usr/share/dict/linux.words 126577 encyclopediac
2 /usr/share/dict/linux.words 126578 encyclopediacal
2 /usr/share/dict/linux.words 126579 encyclopedial
3 /usr/share/dict/linux.words 126580 encyclopedian
1 /usr/share/dict/linux.words 126581 encyclopedias
3 /usr/share/dict/linux.words 126582 encyclopediast
(Note they can come out in any order, so I just chose the order 2 1 3 for this example.)


(There is only one lab program this week.  Each parner in the team gets the same score for the submission.  Each team must have something working they can demo to their TA before the end of their lab Tuesday.  The full program may be completed the same day or may be solved and submitted before the end of your lab on Thursday for full credit of 100%.  Each team member must be present in their lab during submission to receive credit for their lab problem.  If an odd number show up for lab, the last person must work solo.  If another person comes to lab late, they must join with any solo to form a group.)