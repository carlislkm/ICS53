ICS 53 Lab 3
Remember you are not allowed to write any code until you start your scheduled lab time-slot.
You may use any of the functions defined in string.h or ctype.h.
1. Write a program to do the same as du -abh.  Read about du (disk usage) using man on Linux.  Your program should take a list of file/directory names and print the disk usage for each one, then recursion to enter into each directory to compute the usage of each directory.  Read about du using man to ensure you understand what it does and what these arguments mean.  Issue this command to see a sample of the output: du -ah /home
2. Write a program to implement a subset of the grep -r command.  It should take pattern as its first argument, then all other arguments are files or directories.  If they are a file, search for the pattern in the contents of that file and print the lines that contain the pattern.  If the argument is a directory, recursively grep that pattern in each of the files contained in the directory.  The pattern is a fixed string - i.e., there will be no regular-expression meta characters like *()[]+ etc.  Patterns may not containe newlines (you may assume this) and patterns may not span lines, i.e., they must occur within a line to match. Read about grep using man to ensure you understand what it does and what these arguments mean.  Issue this command to see a sample of the output: grep -r bin /etc
3. Write a program to implement wc linux command which prints out the lines words character count for each file/directory passed in as an argument, but make it recursive so it enters into each directory and calls your wc on each file contained within.  Print out the number of words lines characters for each plain file exactly how wc does it, but for directories, recursively do wc on each file contained within the directory.  You can run wc to get an idea of how it should work for your implementation. Read about wc using man to ensure you understand what it does and what these arguments mean.   Issue this command to see a sample of the output (but note wc is not recursive): wc /etc/* 
(Remember, you select and solve two out of the three problems above.  Each correct oprogram is worth 50% of your lab grade for this week.  Each parner in the team gets the same score for the submission.  Programs not working by the end of the lab can get at most 25% if they are close but still have flaws.  You can not submit the first problem later for more credit.  Each team must solve one problem before the end of their lab Tuesday.  The other problem may be completed the same day or may be solved and submitted before the end of your lab on Thursday for full credit of 50%.  Each team member must be present in their lab during submission to receive credit for their lab problem.  If an odd number show up for lab, the last person must work solo.  If another person comes to lab late, they must join with any solo to form a group.)