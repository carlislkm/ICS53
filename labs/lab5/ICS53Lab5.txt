ICS 53 Lab 5
Remember you are not allowed to write any code until you start your scheduled lab time-slot.
You may use any of the functions defined in string.h or ctype.h.
You may use my stack or queue in ~klefstad/public/{stk,que} if you like.
1. Write a pair of programs: one program to convert alpha numeric text input into American morse code output and another program to convert valid American morse code back into alpha numeric. reference  Use . and - for dot and dash respectively. Note the rules about spacing of 1, 3, and 7. You may discard any character that is not alpha numeric, but letters words and numbers should be retained. You may use International Morse Code instead if you prefer, but both your programs must use the same version of Morse Code.
You may use this document as sample input for your text-to-morse program, then run the output of your program as input to your morse-to-text translator.
1. Write a C program to play Conway’s Game of LIfe.  You may use character graphics with a minimum of 80 columns and 22 rows.  You may clear, pause, and redraw the screen if you like.  If you are ambitious, you can use the Linux curses screen package  You should use a random number generator to start the game.  You can use getpid() or time() as the seed for the random number generator http://linux.die.net/man/3/rand
2. Write a program to generate Huffman codes. http://en.wikipedia.org/wiki/Huffman_coding Here is the sample input and code from the Wikipedia page you can use for testing.  The input will be the character with their frequency.  Any missing characters you may assume are zero.  The output should be a table similar to this below:
Sample Input:
‘ ‘ 7
a 4
e 4
f 3
h 2
i 2
m 2
n 2
s 2
t 2
l 1
o 1
p 1
r 1
u 1
x 1
Sample Output:


Char
	Freq
	Code
	space
	7
	111
	a
	4
	010
	e
	4
	000
	f
	3
	1101
	h
	2
	1010
	i
	2
	1000
	m
	2
	0111
	n
	2
	0010
	s
	2
	1011
	t
	2
	0110
	l
	1
	11001
	o
	1
	00110
	p
	1
	10011
	r
	1
	11000
	u
	1
	00111
	x
	1
	10010
	1. Write a program to generate a word ladder for each input word.  Do not solve this one again if you did it last week!  You may use the dictionary in /usr/share/dict/linux.words  http://en.wikipedia.org/wiki/Word_ladder Input is a list of word pairs. Your program should print the word ladder for each pair starting at the first word and the intermediate words until it gets to the second word.  Here is a sample input:
stone money
sail ruin
slow fast
monk perl
Here is a sample output for just the first pair of workds
stone  store  shore  chore  choke  choky  cooky  cooey  coney  money
(Remember, you select and solve two out of the three problems above.  Each correct oprogram is worth 50% of your lab grade for this week.  Each parner in the team gets the same score for the submission.  Programs not working by the end of the lab can get at most 25% if they are close but still have flaws.  You can not submit the first problem later for more credit.  Each team must solve one problem before the end of their lab Tuesday.  The other problem may be completed the same day or may be solved and submitted before the end of your lab on Thursday for full credit of 50%.  Each team member must be present in their lab during submission to receive credit for their lab problem.  If an odd number show up for lab, the last person must work solo.  If another person comes to lab late, they must join with any solo to form a group.)